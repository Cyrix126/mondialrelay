// Generated by https://github.com/lumeohq/xsd-parser-rs cli from https://www.mondialrelay.fr/media/51914/Mondial-Relay-Shipment-API-.Response.1.0.xsd
use std::str::FromStr;
use xsd_macro_utils::{UtilsDefaultSerde, UtilsTupleIo};
use xsd_parser::generator::validator::Validate;
use yaserde::{YaDeserialize, YaSerialize};
#[derive(Default, Clone, PartialEq, Debug, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "tns", namespaces = {"tns"= "http://www.example.org/Response"})]
pub struct ContextType {
    // The user name of the client who calls the
    // service operation. Will be used for
    // authentication. The user name will be provided
    // by MondialRelay.
    #[yaserde(prefix = "tns", rename = "Login")]
    pub login: String,

    // The password of the client who calls the service
    // operation. Will be used for authentication. The
    // password will be provided by MondialRelay.
    #[yaserde(prefix = "tns", rename = "Password")]
    pub password: String,

    // The Customer Id of the client who calls the
    // service operation. Will be used for
    // authentication. The customerId will be provided
    // by MondialRelay.
    #[yaserde(prefix = "tns", rename = "CustomerId")]
    pub customer_id: context_type::CustomerIdType,

    // The culture that will be used to process the
    // request and produce the output expected format :
    // en-US
    #[yaserde(prefix = "tns", rename = "Culture")]
    pub culture: context_type::CultureType,

    // The reference of the API version.
    #[yaserde(prefix = "tns", rename = "VersionAPI")]
    pub version_api: context_type::VersionAPIType,
}

impl Validate for ContextType {}

pub mod context_type {
    use super::*;

    #[derive(Default, Clone, PartialEq, Debug, UtilsTupleIo, UtilsDefaultSerde)]
    pub struct CustomerIdType(pub String);

    impl Validate for CustomerIdType {
        fn validate(&self) -> Result<(), String> {
            #[allow(clippy::len_zero)]
            if self.0.len() < 2 {
                return Err(format!("MinLength validation error. \nExpected: 0 length >= 2 \nActual: 0 length == {}", self.0.len()));
            }
            if self.0.len() > 8 {
                return Err(format!("MaxLength validation error. \nExpected: 0 length <= 8 \nActual: 0 length == {}", self.0.len()));
            }
            Ok(())
        }
    }

    #[derive(Default, Clone, PartialEq, Debug, UtilsTupleIo, UtilsDefaultSerde)]
    pub struct CultureType(pub String);

    impl Validate for CultureType {
        fn validate(&self) -> Result<(), String> {
            if self.0.len() != 5 {
                return Err(format!(
                    "Length validation error. \nExpected: 0 length == 5 \nActual: 0 length == {}",
                    self.0.len()
                ));
            }
            Ok(())
        }
    }

    #[derive(Default, Clone, PartialEq, Debug, UtilsTupleIo, UtilsDefaultSerde)]
    pub struct VersionAPIType(pub String);

    impl Validate for VersionAPIType {}
}

#[derive(Default, Clone, PartialEq, Debug, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "tns", namespaces = {"tns"= "http://www.example.org/Response"})]
pub struct OutputOptionsType {
    // The printer model that will receive the ZPL
    // code. Bellow the model list of compatible
    // printers:
    #[yaserde(prefix = "tns", rename = "OutputFormat")]
    pub output_format: output_options_type::OutputFormatType,

    #[yaserde(prefix = "tns", rename = "OutputType")]
    pub output_type: output_options_type::OutputTypeType,
}

impl Validate for OutputOptionsType {}

pub mod output_options_type {
    use super::*;

    #[derive(Default, Clone, PartialEq, Debug, UtilsTupleIo, UtilsDefaultSerde)]
    pub struct OutputFormatType(pub String);

    impl Validate for OutputFormatType {}
    #[derive(Default, Clone, PartialEq, Debug, UtilsTupleIo, UtilsDefaultSerde)]
    pub struct OutputTypeType(pub String);

    impl Validate for OutputTypeType {}
}

#[derive(Default, Clone, PartialEq, Debug, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "tns", namespaces = {"tns"= "http://www.example.org/Response"})]
pub struct ShipmentCreationResponseType {
    #[yaserde(prefix = "tns", rename = "Context")]
    pub context: ContextType,

    #[yaserde(prefix = "tns", rename = "OutputOptions")]
    pub output_options: OutputOptionsType,

    #[yaserde(prefix = "tns", rename = "ShipmentsList")]
    pub shipments_list: ShipmentsListType,

    #[yaserde(prefix = "tns", rename = "StatusList")]
    pub status_list: StatusListType,
}

impl Validate for ShipmentCreationResponseType {}

#[derive(Default, Clone, PartialEq, Debug, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "tns", namespaces = {"tns"= "http://www.example.org/Response"})]
pub struct StatusListType {
    #[yaserde(prefix = "tns", rename = "Status")]
    pub status: Vec<StatusType>,
}

impl Validate for StatusListType {}

#[derive(Default, Clone, PartialEq, Debug, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "tns", namespaces = {"tns"= "http://www.example.org/Response"})]
pub struct StatusType {
    #[yaserde(attribute = true, rename = "Code")]
    pub code: Option<String>,

    #[yaserde(attribute = true, rename = "Level")]
    pub level: Option<String>,

    #[yaserde(attribute = true, rename = "Message")]
    pub message: Option<String>,
}

impl Validate for StatusType {}

#[derive(Default, Clone, PartialEq, Debug, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "tns", namespaces = {"tns"= "http://www.example.org/Response"})]
pub struct ShipmentsListType {
    #[yaserde(prefix = "tns", rename = "Shipment")]
    pub shipment: Vec<ShipmentOutputType>,
}

impl Validate for ShipmentsListType {}

#[derive(Default, Clone, PartialEq, Debug, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "tns", namespaces = {"tns"= "http://www.example.org/Response"})]
pub struct ShipmentOutputType {
    #[yaserde(prefix = "tns", rename = "LabelList")]
    pub label_list: LabelListType,
}

impl Validate for ShipmentOutputType {}

#[derive(Default, Clone, PartialEq, Debug, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "tns", namespaces = {"tns"= "http://www.example.org/Response"})]
pub struct LabelListType {
    #[yaserde(prefix = "tns", rename = "Label")]
    pub label: LabelType,
}

impl Validate for LabelListType {}

#[derive(Default, Clone, PartialEq, Debug, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "tns", namespaces = {"tns"= "http://www.example.org/Response"})]
pub struct LabelType {
    #[yaserde(prefix = "tns", rename = "RawContent")]
    pub raw_content: LabelRawContentType,

    #[yaserde(prefix = "tns", rename = "Output")]
    pub output: String,
}

impl Validate for LabelType {}

#[derive(Default, Clone, PartialEq, Debug, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "tns", namespaces = {"tns"= "http://www.example.org/Response"})]
pub struct LabelRawContentType {
    #[yaserde(prefix = "tns", rename = "Parcel")]
    pub parcel: ParcelInformationType,

    #[yaserde(prefix = "tns", rename = "Sender")]
    pub sender: AddressType,

    #[yaserde(prefix = "tns", rename = "Recipient")]
    pub recipient: AddressType,

    #[yaserde(prefix = "tns", rename = "LabelValues")]
    pub label_values: Option<KeyValueType>,

    #[yaserde(prefix = "tns", rename = "RoutingArguments")]
    pub routing_arguments: Vec<RoutingArgumentType>,

    #[yaserde(prefix = "tns", rename = "Barcodes")]
    pub barcodes: BarcodesType,
}

impl Validate for LabelRawContentType {}

#[derive(Default, Clone, PartialEq, Debug, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "tns", namespaces = {"tns"= "http://www.example.org/Response"})]
pub struct ParcelInformationType {
    #[yaserde(prefix = "tns", rename = "Data")]
    pub data: Vec<LabelParcelDataType>,
}

impl Validate for ParcelInformationType {}

#[derive(Default, Clone, PartialEq, Debug, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "tns", namespaces = {"tns"= "http://www.example.org/Response"})]
pub struct AddressType {
    #[yaserde(prefix = "tns", rename = "AddressLines")]
    pub address_lines: Vec<AddressLineType>,

    #[yaserde(attribute = true, rename = "ZoneTitle")]
    pub zone_title: Option<String>,
}

impl Validate for AddressType {}

#[derive(Default, Clone, PartialEq, Debug, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "tns", namespaces = {"tns"= "http://www.example.org/Response"})]
pub struct AddressLineType {
    #[yaserde(attribute = true, rename = "Order")]
    pub order: Option<i32>,

    #[yaserde(attribute = true, rename = "AddressLine")]
    pub address_line: Option<String>,
}

impl Validate for AddressLineType {}

#[derive(Default, Clone, PartialEq, Debug, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "tns", namespaces = {"tns"= "http://www.example.org/Response"})]
pub struct RoutingArgumentType {
    #[yaserde(prefix = "tns", rename = "RoutingArgumentLines")]
    pub routing_argument_lines: Vec<RoutingArgumentLineType>,

    #[yaserde(attribute = true, rename = "CarrierCode")]
    pub carrier_code: Option<String>,

    #[yaserde(attribute = true, rename = "Role")]
    pub role: Option<String>,
}

impl Validate for RoutingArgumentType {}

#[derive(Default, Clone, PartialEq, Debug, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "tns", namespaces = {"tns"= "http://www.example.org/Response"})]
pub struct RoutingArgumentLineType {
    #[yaserde(prefix = "tns", rename = "Order")]
    pub order: i32,

    #[yaserde(prefix = "tns", rename = "RoutingArgumentLine")]
    pub routing_argument_line: KeyValueType,
}

impl Validate for RoutingArgumentLineType {}

#[derive(Default, Clone, PartialEq, Debug, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "tns", namespaces = {"tns"= "http://www.example.org/Response"})]
pub struct KeyValueType {
    #[yaserde(attribute = true, rename = "Key")]
    pub key: Option<String>,

    #[yaserde(attribute = true, rename = "Value")]
    pub value: Option<String>,
}

impl Validate for KeyValueType {}

#[derive(Default, Clone, PartialEq, Debug, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "tns", namespaces = {"tns"= "http://www.example.org/Response"})]
pub struct BarcodesType {
    #[yaserde(prefix = "tns", rename = "Barcode")]
    pub barcode: Vec<BarcodeType>,
}

impl Validate for BarcodesType {}

#[derive(Default, Clone, PartialEq, Debug, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "tns", namespaces = {"tns"= "http://www.example.org/Response"})]
pub struct BarcodeType {
    #[yaserde(attribute = true, rename = "Type")]
    pub _type: Option<String>,

    #[yaserde(attribute = true, rename = "DisplayedValue")]
    pub displayed_value: Option<String>,

    #[yaserde(attribute = true, rename = "Value")]
    pub value: Option<String>,

    #[yaserde(attribute = true, rename = "CarrierCode")]
    pub carrier_code: Option<String>,
}

impl Validate for BarcodeType {}

#[derive(Default, Clone, PartialEq, Debug, YaSerialize, YaDeserialize)]
#[yaserde(prefix = "tns", namespaces = {"tns"= "http://www.example.org/Response"})]
pub struct LabelParcelDataType {
    #[yaserde(attribute = true, rename = "Order")]
    pub order: Option<i32>,

    #[yaserde(attribute = true, rename = "Title")]
    pub title: Option<String>,

    #[yaserde(attribute = true, rename = "Value")]
    pub value: Option<String>,
}

impl Validate for LabelParcelDataType {}
