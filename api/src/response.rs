// Generated by https://github.com/lumeohq/xsd-parser-rs cli from https://www.mondialrelay.fr/media/51914/Mondial-Relay-Shipment-API-.Response.1.0.xsd
use std::str::FromStr;
use xsd_macro_utils::{UtilsDefaultSerde, UtilsTupleIo};
use xsd_parser::generator::validator::Validate;
use yaserde::{YaDeserialize, YaSerialize};
#[derive(Default, Clone, PartialEq, Debug, YaSerialize, YaDeserialize)]
#[yaserde(namespaces = {"xsi" = "http://www.w3.org/2001/XMLSchema-instance", "xsd" = "http://www.w3.org/2001/XMLSchema", "" = "http://www.example.org/Request"})]
pub struct Context {
    // The user name of the client who calls the
    // service operation. Will be used for
    // authentication. The user name will be provided
    // by MondialRelay.
    #[yaserde(rename = "Login")]
    pub login: String,

    // The password of the client who calls the service
    // operation. Will be used for authentication. The
    // password will be provided by MondialRelay.
    #[yaserde(rename = "Password")]
    pub password: String,

    // The Customer Id of the client who calls the
    // service operation. Will be used for
    // authentication. The customerId will be provided
    // by MondialRelay.
    #[yaserde(rename = "CustomerId")]
    pub customer_id: context_type::CustomerId,

    // The culture that will be used to process the
    // request and produce the output expected format :
    // en-US
    #[yaserde(rename = "Culture")]
    pub culture: context_type::Culture,

    // The reference of the API version.
    #[yaserde(rename = "VersionAPI")]
    pub version_api: context_type::VersionAPI,
}

impl Validate for Context {}

pub mod context_type {
    use super::*;

    #[derive(Default, Clone, PartialEq, Debug, UtilsTupleIo, UtilsDefaultSerde)]
    pub struct CustomerId(pub String);

    impl Validate for CustomerId {
        fn validate(&self) -> Result<(), String> {
            #[allow(clippy::len_zero)]
            if self.0.len() < 2 {
                return Err(format!("MinLength validation error. \nExpected: 0 length >= 2 \nActual: 0 length == {}", self.0.len()));
            }
            if self.0.len() > 8 {
                return Err(format!("MaxLength validation error. \nExpected: 0 length <= 8 \nActual: 0 length == {}", self.0.len()));
            }
            Ok(())
        }
    }

    #[derive(Default, Clone, PartialEq, Debug, UtilsTupleIo, UtilsDefaultSerde)]
    pub struct Culture(pub String);

    impl Validate for Culture {
        fn validate(&self) -> Result<(), String> {
            if self.0.len() != 5 {
                return Err(format!(
                    "Length validation error. \nExpected: 0 length == 5 \nActual: 0 length == {}",
                    self.0.len()
                ));
            }
            Ok(())
        }
    }

    #[derive(Default, Clone, PartialEq, Debug, UtilsTupleIo, UtilsDefaultSerde)]
    pub struct VersionAPI(pub String);

    impl Validate for VersionAPI {}
}

#[derive(Default, Clone, PartialEq, Debug, YaSerialize, YaDeserialize)]
pub struct OutputOptions {
    // The printer model that will receive the ZPL
    // code. Bellow the model list of compatible
    // printers:
    #[yaserde(rename = "OutputFormat")]
    pub output_format: output_options_type::OutputFormat,

    #[yaserde(rename = "Output")]
    pub output_type: output_options_type::Output,
}

impl Validate for OutputOptions {}

pub mod output_options_type {
    use super::*;

    #[derive(Default, Clone, PartialEq, Debug, UtilsTupleIo, UtilsDefaultSerde)]
    pub struct OutputFormat(pub String);

    impl Validate for OutputFormat {}
    #[derive(Default, Clone, PartialEq, Debug, UtilsTupleIo, UtilsDefaultSerde)]
    pub struct Output(pub String);

    impl Validate for Output {}
}

#[derive(Default, Clone, PartialEq, Debug, YaSerialize, YaDeserialize)]
pub struct ShipmentCreationResponse {
    #[yaserde(rename = "Context")]
    pub context: Context,

    #[yaserde(rename = "OutputOptions")]
    pub output_options: OutputOptions,

    #[yaserde(rename = "ShipmentsList")]
    pub shipments_list: ShipmentsList,

    #[yaserde(rename = "StatusList")]
    pub status_list: StatusList,
}

impl Validate for ShipmentCreationResponse {}

#[derive(Default, Clone, PartialEq, Debug, YaSerialize, YaDeserialize)]
pub struct StatusList {
    #[yaserde(rename = "Status")]
    pub status: Vec<Status>,
}

impl Validate for StatusList {}

#[derive(Default, Clone, PartialEq, Debug, YaSerialize, YaDeserialize)]
pub struct Status {
    #[yaserde(attribute = true, rename = "Code")]
    pub code: Option<String>,

    #[yaserde(attribute = true, rename = "Level")]
    pub level: Option<String>,

    #[yaserde(attribute = true, rename = "Message")]
    pub message: Option<String>,
}

impl Validate for Status {}

#[derive(Default, Clone, PartialEq, Debug, YaSerialize, YaDeserialize)]
pub struct ShipmentsList {
    #[yaserde(rename = "Shipment")]
    pub shipment: Vec<ShipmentOutput>,
}

impl Validate for ShipmentsList {}

#[derive(Default, Clone, PartialEq, Debug, YaSerialize, YaDeserialize)]
pub struct ShipmentOutput {
    #[yaserde(rename = "LabelList")]
    pub label_list: LabelList,
}

impl Validate for ShipmentOutput {}

#[derive(Default, Clone, PartialEq, Debug, YaSerialize, YaDeserialize)]
pub struct LabelList {
    #[yaserde(rename = "Label")]
    pub label: Label,
}

impl Validate for LabelList {}

#[derive(Default, Clone, PartialEq, Debug, YaSerialize, YaDeserialize)]
pub struct Label {
    #[yaserde(rename = "RawContent")]
    pub raw_content: LabelRawContent,

    #[yaserde(rename = "Output")]
    pub output: String,
}

impl Validate for Label {}

#[derive(Default, Clone, PartialEq, Debug, YaSerialize, YaDeserialize)]
pub struct LabelRawContent {
    #[yaserde(rename = "Parcel")]
    pub parcel: ParcelInformation,

    #[yaserde(rename = "Sender")]
    pub sender: Address,

    #[yaserde(rename = "Recipient")]
    pub recipient: Address,

    #[yaserde(rename = "LabelValues")]
    pub label_values: Option<KeyValue>,

    #[yaserde(rename = "RoutingArguments")]
    pub routing_arguments: Vec<RoutingArgument>,

    #[yaserde(rename = "Barcodes")]
    pub barcodes: Barcodes,
}

impl Validate for LabelRawContent {}

#[derive(Default, Clone, PartialEq, Debug, YaSerialize, YaDeserialize)]
pub struct ParcelInformation {
    #[yaserde(rename = "Data")]
    pub data: Vec<LabelParcelData>,
}

impl Validate for ParcelInformation {}

#[derive(Default, Clone, PartialEq, Debug, YaSerialize, YaDeserialize)]
pub struct Address {
    #[yaserde(rename = "AddressLines")]
    pub address_lines: Vec<AddressLine>,

    #[yaserde(attribute = true, rename = "ZoneTitle")]
    pub zone_title: Option<String>,
}

impl Validate for Address {}

#[derive(Default, Clone, PartialEq, Debug, YaSerialize, YaDeserialize)]
pub struct AddressLine {
    #[yaserde(attribute = true, rename = "Order")]
    pub order: Option<i32>,

    #[yaserde(attribute = true, rename = "AddressLine")]
    pub address_line: Option<String>,
}

impl Validate for AddressLine {}

#[derive(Default, Clone, PartialEq, Debug, YaSerialize, YaDeserialize)]
pub struct RoutingArgument {
    #[yaserde(rename = "RoutingArgumentLines")]
    pub routing_argument_lines: Vec<RoutingArgumentLine>,

    #[yaserde(attribute = true, rename = "CarrierCode")]
    pub carrier_code: Option<String>,

    #[yaserde(attribute = true, rename = "Role")]
    pub role: Option<String>,
}

impl Validate for RoutingArgument {}

#[derive(Default, Clone, PartialEq, Debug, YaSerialize, YaDeserialize)]
pub struct RoutingArgumentLine {
    #[yaserde(rename = "Order")]
    pub order: i32,

    #[yaserde(rename = "RoutingArgumentLine")]
    pub routing_argument_line: KeyValue,
}

impl Validate for RoutingArgumentLine {}

#[derive(Default, Clone, PartialEq, Debug, YaSerialize, YaDeserialize)]
pub struct KeyValue {
    #[yaserde(attribute = true, rename = "Key")]
    pub key: Option<String>,

    #[yaserde(attribute = true, rename = "Value")]
    pub value: Option<String>,
}

impl Validate for KeyValue {}

#[derive(Default, Clone, PartialEq, Debug, YaSerialize, YaDeserialize)]
pub struct Barcodes {
    #[yaserde(rename = "Barcode")]
    pub barcode: Vec<Barcode>,
}

impl Validate for Barcodes {}

#[derive(Default, Clone, PartialEq, Debug, YaSerialize, YaDeserialize)]
pub struct Barcode {
    #[yaserde(attribute = true, rename = "")]
    pub _type: Option<String>,

    #[yaserde(attribute = true, rename = "DisplayedValue")]
    pub displayed_value: Option<String>,

    #[yaserde(attribute = true, rename = "Value")]
    pub value: Option<String>,

    #[yaserde(attribute = true, rename = "CarrierCode")]
    pub carrier_code: Option<String>,
}

impl Validate for Barcode {}

#[derive(Default, Clone, PartialEq, Debug, YaSerialize, YaDeserialize)]
pub struct LabelParcelData {
    #[yaserde(attribute = true, rename = "Order")]
    pub order: Option<i32>,

    #[yaserde(attribute = true, rename = "Title")]
    pub title: Option<String>,

    #[yaserde(attribute = true, rename = "Value")]
    pub value: Option<String>,
}

impl Validate for LabelParcelData {}
